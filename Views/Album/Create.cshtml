@model BigHitEntatinment.Models.AlbumViewModel

@{
    ViewBag.Title = "Create";
}


<h2>앨범 등록</h2>

@using (Html.BeginForm("Create", "Album", FormMethod.Post, new { enctype = "multipart/form-data" }))
{
    @Html.AntiForgeryToken()

    <div class="form-horizontal">
        <h4>앨범 정보</h4>
        <hr />
        @Html.ValidationSummary(true, "", new { @class = "text-danger" })
        @*@Html.HiddenFor(model => model.ImageUrl)*@

        <div class="form-group">
            @Html.LabelFor(model => model.Title, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.EditorFor(model => model.Title, new { htmlAttributes = new { @class = "form-control", @maxlength = "100" } })
                @Html.ValidationMessageFor(model => model.Title, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.Subtitle, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.EditorFor(model => model.Subtitle, new { htmlAttributes = new { @class = "form-control", @maxlength = "100" } })
                @Html.ValidationMessageFor(model => model.Subtitle, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.ReleasedDate, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.EditorFor(model => model.ReleasedDate, new { htmlAttributes = new { @class = "form-control datefield input-group input-append date", @type = "datetime", @Id = "ReleasedDate", @placeholder = "yyyy-mm-dd" } })
                @Html.ValidationMessageFor(model => model.ReleasedDate, "", new { @class = "text-danger" })
            </div>
        </div>


        <div class="form-group">
            @Html.LabelFor(model => model.ImageUrl, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10 filebox preview-image">
                @Html.EditorFor(model => model.ImageUrl, new { htmlAttributes = new { @class = "form-control upload-name", @readonly = "true", @Id = "ImageUrl", @style = "max-width: 210px; margin-bottom: .25em;" } })
                <label for="file">업로드</label>
                <input type="file" name="file" id="file" class="upload-hidden" />
                @Html.ValidationMessageFor(model => model.ImageUrl, "", new { @class = "text-danger" })
            </div>
        </div>


        <div class="form-group">
            @Html.LabelFor(model => model.Description, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.EditorFor(model => model.Description, new { htmlAttributes = new { @class = "form-control", data_bind = "value:Description, valueUpdate:'input'", @maxlength = "2000" } })
                <span style="color: #999;" data-bind="text:charactersRemaining"></span><span style="color: #999; font-size: medium"> 자 남음</span>
                @Html.ValidationMessageFor(model => model.Description, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.ArtistId, "ArtistId", htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.DropDownList("ArtistId", null, htmlAttributes: new { @class = "form-control" })
                @Html.ValidationMessageFor(model => model.ArtistId, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            <div class="col-md-offset-2 col-md-10">
                <input type="submit" value="Create" class="btn btn-primary" disabled="disabled" />
            </div>
        </div>
    </div>
}

<div>
    @Html.ActionLink("Back to List", "Index", "", htmlAttributes: new { @class = "btn btn-default btn-xs" })
</div>

@section Scripts {
    @Scripts.Render("~/bundles/jqueryval"
                    , "~/Scripts/knockout-3.4.2.js")
    <script>
        //
        function createViewModel() {
            var self = this;
            self.Description = ko.observable('');
            self.charactersRemaining = ko.computed(function () {
                return 2000 - self.Description().length;
            })
        }
        //
        ko.applyBindings(new createViewModel());
    </script>


    <script>
        $(document).ready(function () {
            var fileTarget = $('.filebox .upload-hidden');

            fileTarget.on('change', function () {
                if (window.FileReader) {
                    var filename = $(this)[0].files[0].name;
                } else {
                    var filename = $(this).val().split('/').pop().split('\\').pop();
                }

                //$(this).siblings('.upload-name').val(filename);
                $("input#ImageUrl").val(filename);
            });
        });

        $(function () {
            $("#ReleasedDate").datepicker();
        });
    </script>
}
